// <auto-generated />
using System;
using CosmeticShop.Data.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CosmeticShop.Data.Migrations
{
    [DbContext(typeof(CosmeticShopDbContext))]
    [Migration("20240319123208_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDescription = "Parfüm Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2979),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2990),
                            Name = "Parfüm",
                            Url = "parfum"
                        },
                        new
                        {
                            Id = 2,
                            CategoryDescription = "Ruj Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2996),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2997),
                            Name = "Ruj",
                            Url = "ruj"
                        },
                        new
                        {
                            Id = 3,
                            CategoryDescription = "Oje Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2998),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2998),
                            Name = "Oje",
                            Url = "oje"
                        },
                        new
                        {
                            Id = 4,
                            CategoryDescription = "Krem Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2999),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(2999),
                            Name = "Krem",
                            Url = "krem"
                        },
                        new
                        {
                            Id = 5,
                            CategoryDescription = "Göz Makyajı Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(3000),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(3000),
                            Name = "Göz Makyajı",
                            Url = "goz-makyajı"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4d9f7b78-3df9-4a45-9deb-de7d9a064b3d",
                            Description = "Süper Yönetici haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "3efe0038-2392-4001-ac62-c68fdac20b20",
                            Description = "Yönetici haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8df9ed60-4b6a-4133-8176-a5a007939b41",
                            Description = "Müşteri haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21caa738-c0e9-4b45-9793-03d9cf2320e0",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "dbd96f8a-ac24-4dcb-9b06-70f08b50e142",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizfoca@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Erkek",
                            LastName = "Foça",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZFOCA@GMAIL.COM",
                            NormalizedUserName = "DENIZFOCA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMx0ZkRjYkVEo1C0rKcwVYhO7irOFVt81z+oLxkYve5Zwtq0EcGMJGGZ7dgVePY+Yw==",
                            PhoneNumber = "5558779966",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "910865b2-168c-4481-bf6f-93480a8a9d4e",
                            TwoFactorEnabled = false,
                            UserName = "denizfoca"
                        },
                        new
                        {
                            Id = "e888e62b-6d04-4bae-9b08-f6ac65ff680b",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "502565c6-954e-4d1f-9e3d-0f49c8d06161",
                            DateOfBirth = new DateTime(1993, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinmete@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            LastName = "Mete",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINMETE@GMAIL.COM",
                            NormalizedUserName = "SELINMETE",
                            PasswordHash = "AQAAAAIAAYagAAAAECh/hV53YvMQyuyps4xf/CqpHsAdxdL7e+mZyJzzndtbDjvkJsFBV5rh1XL/ROuxIA==",
                            PhoneNumber = "5387996655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1452c1db-b6df-43d0-a8e0-d36dd6510423",
                            TwoFactorEnabled = false,
                            UserName = "selinmete"
                        },
                        new
                        {
                            Id = "7f026021-58eb-4d4b-8101-73a5cca611b0",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "ee438376-8d4b-48b7-a7d5-b1e05527ea63",
                            DateOfBirth = new DateTime(1993, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemaldurukan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            LastName = "Durukan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALDURUKAN@GMAIL.COM",
                            NormalizedUserName = "KEMALDURUKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAELDmh7cwEBEZ3Z7NQCw/82jAnWdbtDfDrZgGGMXrYhNjiGCuZ5/1yVk6jMbkoGNFBg==",
                            PhoneNumber = "5387996655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "badea97e-5d30-4e13-988e-e87ea5dd490a",
                            TwoFactorEnabled = false,
                            UserName = "kemaldurukan"
                        },
                        new
                        {
                            Id = "cd67b29b-a7eb-46c6-85d3-31a0d148ba79",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "5c63acb0-0137-49d2-91e0-ebcccf18420d",
                            DateOfBirth = new DateTime(1993, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aysenumay@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşen Umay",
                            Gender = "Kadın",
                            LastName = "Ergül",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSENUMAY@GMAIL.COM",
                            NormalizedUserName = "AYSENUMAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5nhXY9EOZp0fTFZJ7CrsacA9azejHZlcCvX2HVfh1NMP3uGtVdHl4lNPj4yjuF8A==",
                            PhoneNumber = "5387996655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5f916be-8685-4fe9-95aa-30691197e30f",
                            TwoFactorEnabled = false,
                            UserName = "aysenumay"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7606),
                            ImageUrl = "1.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7610),
                            Name = "Diorm Sauvage EDP",
                            Price = 13000m,
                            Properties = "Mükemmel bir parfüm",
                            Url = "dior-sauvage"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7617),
                            ImageUrl = "2.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7617),
                            Name = "Avon Full Speed",
                            Price = 69000m,
                            Properties = "Mükemmel parfüm",
                            Url = "avon-full-speed"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7618),
                            ImageUrl = "3.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7619),
                            Name = "Tom Ford Bois Marocain Eau de Parfum 250 Ml",
                            Price = 29000m,
                            Properties = "İdare eder",
                            Url = "tom-ford-bois-marocain"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7620),
                            ImageUrl = "4.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7621),
                            Name = "Givenchy Gentleman Boisee Eau de Parfum EDP 200 Ml",
                            Price = 39000m,
                            Properties = "Harika bir parfüm",
                            Url = "givenchy-gentlemen-boisee"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7622),
                            ImageUrl = "5.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7622),
                            Name = "Dior Fahrenheit / Erkek Parfüm",
                            Price = 52000m,
                            Properties = "Harika bir parfüm",
                            Url = "dior-fahrenheit"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7623),
                            ImageUrl = "6.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7624),
                            Name = "Blvgari BVLGARI Man Wood Essence - Eau de Parfum 150ml",
                            Price = 79000m,
                            Properties = "harika bir parfüm",
                            Url = "blvgari-man-vood"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7625),
                            ImageUrl = "7.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7625),
                            Name = "Creed Aventus Edp 100 ml Erkek Parfüm",
                            Price = 19000m,
                            Properties = "harika bir parfüm",
                            Url = "creed-aventus-edp"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7626),
                            ImageUrl = "8.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7631),
                            Name = "Parfums De Marly Pegasus Exclusif Edp 125 ml",
                            Price = 21000m,
                            Properties = "Süper bir parfüm",
                            Url = "parfums-de-marly-pegasus"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7661),
                            ImageUrl = "9.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7662),
                            Name = "Tom Ford Tobacco Vanille Eau de Parfum 50 Ml",
                            Price = 1250m,
                            Properties = "Klasik sevenler için",
                            Url = "tom-ford-tobacco-vanille"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7663),
                            ImageUrl = "10.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7663),
                            Name = "Spice Bomb Extreme",
                            Price = 2100m,
                            Properties = "Dayanılmaz koku",
                            Url = "spice-bomb-extreme"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7665),
                            ImageUrl = "11.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 15, 32, 8, 459, DateTimeKind.Local).AddTicks(7665),
                            Name = "Paco Rabanne Invictus EDT Erkek Parfüm, 100 ml",
                            Price = 9800m,
                            Properties = "Dünya klasiği dayanılmaz koku",
                            Url = "paco-rabanne-invictus"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 454, DateTimeKind.Local).AddTicks(8673),
                            UserId = "21caa738-c0e9-4b45-9793-03d9cf2320e0"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 454, DateTimeKind.Local).AddTicks(8751),
                            UserId = "e888e62b-6d04-4bae-9b08-f6ac65ff680b"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 454, DateTimeKind.Local).AddTicks(8753),
                            UserId = "7f026021-58eb-4d4b-8101-73a5cca611b0"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 3, 19, 15, 32, 8, 454, DateTimeKind.Local).AddTicks(8754),
                            UserId = "cd67b29b-a7eb-46c6-85d3-31a0d148ba79"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "21caa738-c0e9-4b45-9793-03d9cf2320e0",
                            RoleId = "4d9f7b78-3df9-4a45-9deb-de7d9a064b3d"
                        },
                        new
                        {
                            UserId = "e888e62b-6d04-4bae-9b08-f6ac65ff680b",
                            RoleId = "3efe0038-2392-4001-ac62-c68fdac20b20"
                        },
                        new
                        {
                            UserId = "7f026021-58eb-4d4b-8101-73a5cca611b0",
                            RoleId = "3efe0038-2392-4001-ac62-c68fdac20b20"
                        },
                        new
                        {
                            UserId = "cd67b29b-a7eb-46c6-85d3-31a0d148ba79",
                            RoleId = "8df9ed60-4b6a-4133-8176-a5a007939b41"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Entity.Concrete.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
