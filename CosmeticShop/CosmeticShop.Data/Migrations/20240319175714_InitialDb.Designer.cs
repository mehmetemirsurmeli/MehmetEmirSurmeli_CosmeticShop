// <auto-generated />
using System;
using CosmeticShop.Data.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CosmeticShop.Data.Migrations
{
    [DbContext(typeof(CosmeticShopDbContext))]
    [Migration("20240319175714_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDescription = "Parfüm Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5526),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5534),
                            Name = "Parfüm",
                            Url = "parfum"
                        },
                        new
                        {
                            Id = 2,
                            CategoryDescription = "Ruj Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5537),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5538),
                            Name = "Ruj",
                            Url = "ruj"
                        },
                        new
                        {
                            Id = 3,
                            CategoryDescription = "Oje Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5539),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5539),
                            Name = "Oje",
                            Url = "oje"
                        },
                        new
                        {
                            Id = 4,
                            CategoryDescription = "Krem Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5540),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5540),
                            Name = "Krem",
                            Url = "krem"
                        },
                        new
                        {
                            Id = 5,
                            CategoryDescription = "Göz Makyajı Kategorisi",
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5541),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 74, DateTimeKind.Local).AddTicks(5541),
                            Name = "Göz Makyajı",
                            Url = "goz-makyajı"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8b90e8f7-baf5-4624-ba14-8080d72fc5ab",
                            Description = "Süper Yönetici haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "06db5e59-dd7b-407a-8a96-d9050b10ba04",
                            Description = "Yönetici haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5fcde580-987e-4008-a445-2cab118242c2",
                            Description = "Müşteri haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27196054-ff0d-4cc9-b94b-f5db85b17836",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "a92aae12-c92e-4040-93dc-2289f8e1acd7",
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizfoca@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Erkek",
                            LastName = "Foça",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZFOCA@GMAIL.COM",
                            NormalizedUserName = "DENIZFOCA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJ7qnObBh7ssi97+cHEjcmvlvz+5Z93ZtPG9UZdXWz5ZDMz8V6bLZTNLedcQA8VdA==",
                            PhoneNumber = "5558779966",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b5f9cd6-7b5a-451d-8b76-a2306d3d0f5a",
                            TwoFactorEnabled = false,
                            UserName = "denizfoca"
                        },
                        new
                        {
                            Id = "f342cdaa-f5cf-40f8-996d-45481869b8f8",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "7778f66c-b1b5-4632-803e-2427db5fd6fb",
                            DateOfBirth = new DateTime(1993, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinmete@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            LastName = "Mete",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINMETE@GMAIL.COM",
                            NormalizedUserName = "SELINMETE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEP6hGfTugsbtNV+areYcpz72HnLPcZtDIAAsA05aTQEvqXv6+V2K2wjuvFCzPs6g==",
                            PhoneNumber = "5387996655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cfe5ea8-8308-41dd-b535-8316933fd8d1",
                            TwoFactorEnabled = false,
                            UserName = "selinmete"
                        },
                        new
                        {
                            Id = "2bedcf20-6315-447a-8453-2a5b02e3e368",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "c9636e01-ca4b-4ea6-a14c-f7038724453e",
                            DateOfBirth = new DateTime(1993, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemaldurukan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            LastName = "Durukan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALDURUKAN@GMAIL.COM",
                            NormalizedUserName = "KEMALDURUKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBH8VeK0zAQCsIBpr+QO4YW7kV0Nmvt65m7m/iEdPszHK0M1VXEBP6MClSJ2QO89nw==",
                            PhoneNumber = "5387996655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fadf8664-60b8-4a89-a132-8939162caf20",
                            TwoFactorEnabled = false,
                            UserName = "kemaldurukan"
                        },
                        new
                        {
                            Id = "f368bc77-81f0-413b-91f1-b6c0562233b0",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Caddesi Kemeraltı Sokak No:4 D:2 Üsküdar",
                            City = "İstanbul",
                            ConcurrencyStamp = "5c5e539d-8c52-4484-addc-0cc06d2a5a36",
                            DateOfBirth = new DateTime(1993, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aysenumay@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşen Umay",
                            Gender = "Kadın",
                            LastName = "Ergül",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSENUMAY@GMAIL.COM",
                            NormalizedUserName = "AYSENUMAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEKFDkWdARskCpIFZNHlRLY3ng1WqmCjtUNqDXe90ofZf8qa0Bdhg2vIax0mm15TjyA==",
                            PhoneNumber = "5387996655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "826f8277-1695-4e95-9e71-2571e1381a9d",
                            TwoFactorEnabled = false,
                            UserName = "aysenumay"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1280),
                            ImageUrl = "1.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1283),
                            Name = "Diorm Sauvage EDP",
                            Price = 13000m,
                            Properties = "Mükemmel bir parfüm",
                            Url = "dior-sauvage"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1287),
                            ImageUrl = "2.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1288),
                            Name = "Avon Full Speed",
                            Price = 69000m,
                            Properties = "Mükemmel parfüm",
                            Url = "avon-full-speed"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1289),
                            ImageUrl = "3.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1290),
                            Name = "Tom Ford Bois Marocain Eau de Parfum 250 Ml",
                            Price = 29000m,
                            Properties = "İdare eder",
                            Url = "tom-ford-bois-marocain"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1291),
                            ImageUrl = "4.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1292),
                            Name = "Givenchy Gentleman Boisee Eau de Parfum EDP 200 Ml",
                            Price = 39000m,
                            Properties = "Harika bir parfüm",
                            Url = "givenchy-gentlemen-boisee"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1293),
                            ImageUrl = "5.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1294),
                            Name = "Dior Fahrenheit / Erkek Parfüm",
                            Price = 52000m,
                            Properties = "Harika bir parfüm",
                            Url = "dior-fahrenheit"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1295),
                            ImageUrl = "6.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1295),
                            Name = "Blvgari BVLGARI Man Wood Essence - Eau de Parfum 150ml",
                            Price = 79000m,
                            Properties = "harika bir parfüm",
                            Url = "blvgari-man-vood"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1296),
                            ImageUrl = "7.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1297),
                            Name = "Creed Aventus Edp 100 ml Erkek Parfüm",
                            Price = 19000m,
                            Properties = "harika bir parfüm",
                            Url = "creed-aventus-edp"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1298),
                            ImageUrl = "8.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1302),
                            Name = "Parfums De Marly Pegasus Exclusif Edp 125 ml",
                            Price = 21000m,
                            Properties = "Süper bir parfüm",
                            Url = "parfums-de-marly-pegasus"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1316),
                            ImageUrl = "9.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1317),
                            Name = "Tom Ford Tobacco Vanille Eau de Parfum 50 Ml",
                            Price = 1250m,
                            Properties = "Klasik sevenler için",
                            Url = "tom-ford-tobacco-vanille"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1318),
                            ImageUrl = "10.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1318),
                            Name = "Spice Bomb Extreme",
                            Price = 2100m,
                            Properties = "Dayanılmaz koku",
                            Url = "spice-bomb-extreme"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1319),
                            ImageUrl = "11.png",
                            IsActive = false,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 3, 19, 20, 57, 14, 75, DateTimeKind.Local).AddTicks(1320),
                            Name = "Paco Rabanne Invictus EDT Erkek Parfüm, 100 ml",
                            Price = 9800m,
                            Properties = "Dünya klasiği dayanılmaz koku",
                            Url = "paco-rabanne-invictus"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 71, DateTimeKind.Local).AddTicks(2629),
                            UserId = "27196054-ff0d-4cc9-b94b-f5db85b17836"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 71, DateTimeKind.Local).AddTicks(2655),
                            UserId = "f342cdaa-f5cf-40f8-996d-45481869b8f8"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 71, DateTimeKind.Local).AddTicks(2656),
                            UserId = "2bedcf20-6315-447a-8453-2a5b02e3e368"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 3, 19, 20, 57, 14, 71, DateTimeKind.Local).AddTicks(2657),
                            UserId = "f368bc77-81f0-413b-91f1-b6c0562233b0"
                        });
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "27196054-ff0d-4cc9-b94b-f5db85b17836",
                            RoleId = "8b90e8f7-baf5-4624-ba14-8080d72fc5ab"
                        },
                        new
                        {
                            UserId = "f342cdaa-f5cf-40f8-996d-45481869b8f8",
                            RoleId = "06db5e59-dd7b-407a-8a96-d9050b10ba04"
                        },
                        new
                        {
                            UserId = "2bedcf20-6315-447a-8453-2a5b02e3e368",
                            RoleId = "06db5e59-dd7b-407a-8a96-d9050b10ba04"
                        },
                        new
                        {
                            UserId = "f368bc77-81f0-413b-91f1-b6c0562233b0",
                            RoleId = "5fcde580-987e-4008-a445-2cab118242c2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Entity.Concrete.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CosmeticShop.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("CosmeticShop.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
